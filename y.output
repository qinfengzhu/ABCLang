Terminals which are not used

   ELSEIF


Grammar

    0 $accept: translation_unit $end

    1 translation_unit: def_or_statement
    2                 | translation_unit def_or_statement

    3 def_or_statement: function_def
    4                 | statement

    5 function_def: FUNCTION IDENTIFIER LP parameter_list RP block
    6             | FUNCTION IDENTIFIER LP RP block

    7 argument_list: expression
    8              | argument_list COMMA expression

    9 parameter_list: IDENTIFIER
   10               | parameter_list COMMA IDENTIFIER

   11 block: LC statement_list RC
   12      | LC RC

   13 statement_list: statement
   14               | statement_list statement

   15 statement: statement_expression SEMICOLON
   16          | global_statement
   17          | if_statement
   18          | for_statement
   19          | while_statement
   20          | break_statement
   21          | continue_statement
   22          | return_statement

   23 global_statement: identifier_list SEMICOLON

   24 identifier_list: IDENTIFIER
   25                | identifier_list COMMA IDENTIFIER

   26 if_statement: IF expression block
   27             | IF expression block ELSE block
   28             | IF expression block elseif_list
   29             | IF expression block elseif_list ELSE block

   30 elseif_list: elseif
   31            | elseif_list elseif

   32 elseif: ELSE IF expression block

   33 for_statement: FOR expression_opt COMMA expression_opt COMMA expression_opt block

   34 while_statement: WHILE expression block

   35 return_statement: RETURN_T expression SEMICOLON

   36 break_statement: BREAK SEMICOLON

   37 continue_statement: CONTINUE SEMICOLON

   38 expression_opt: /* empty */
   39               | expression

   40 statement_expression: assign_expression
   41                     | method_call_expression
   42                     | function_call_expression

   43 assign_expression: IDENTIFIER ASSIGN expression

   44 method_call_expression: postfix_expression DOT IDENTIFIER LP argument_list RP
   45                       | postfix_expression DOT IDENTIFIER LP RP

   46 function_call_expression: IDENTIFIER LP argument_list RP
   47                         | IDENTIFIER LP RP

   48 expression: logical_or_expression

   49 logical_or_expression: logical_and_expression
   50                      | logical_or_expression LOGICAL_OR logical_and_expression

   51 logical_and_expression: equality_expression
   52                       | logical_and_expression LOGICAL_AND equality_expression

   53 equality_expression: relational_expression
   54                    | equality_expression EQ relational_expression
   55                    | equality_expression NE relational_expression

   56 relational_expression: add_sub_expression
   57                      | relational_expression GT add_sub_expression
   58                      | relational_expression GE add_sub_expression
   59                      | relational_expression LT add_sub_expression
   60                      | relational_expression LE add_sub_expression

   61 add_sub_expression: mul_div_mod_expression
   62                   | add_sub_expression ADD mul_div_mod_expression
   63                   | add_sub_expression SUB mul_div_mod_expression

   64 mul_div_mod_expression: incr_decr_expression
   65                       | mul_div_mod_expression MUL incr_decr_expression
   66                       | mul_div_mod_expression DIV incr_decr_expression
   67                       | mul_div_mod_expression MOD incr_decr_expression

   68 incr_decr_expression: minus_expression
   69                     | incr_decr_expression INCR
   70                     | incr_decr_expression DECR

   71 minus_expression: postfix_expression
   72                 | SUB postfix_expression

   73 postfix_expression: primary_expression
   74                   | postfix_expression LB expression RB

   75 primary_expression: function_call_expression
   76                   | method_call_expression
   77                   | LP expression RP
   78                   | IDENTIFIER
   79                   | INT_LITERAL
   80                   | DOUBLE_LITERAL
   81                   | STRING_LITERAL
   82                   | TRUE_T
   83                   | FALSE_T
   84                   | NULL_T


Terminals, with rules where they appear

$end (0) 0
error (256)
INT_LITERAL (258) 79
DOUBLE_LITERAL (259) 80
STRING_LITERAL (260) 81
IDENTIFIER (261) 5 6 9 10 24 25 43 44 45 46 47 78
FUNCTION (262) 5 6
IF (263) 26 27 28 29 32
ELSE (264) 27 29 32
ELSEIF (265)
WHILE (266) 34
FOR (267) 33
RETURN_T (268) 35
BREAK (269) 36
CONTINUE (270) 37
NULL_T (271) 84
INCR (272) 69
DECR (273) 70
LP (274) 5 6 44 45 46 47 77
RP (275) 5 6 44 45 46 47 77
LB (276) 74
RB (277) 74
LC (278) 11 12
RC (279) 11 12
DOT (280) 44 45
SEMICOLON (281) 15 23 35 36 37
COMMA (282) 8 10 25 33
ASSIGN (283) 43
LOGICAL_AND (284) 52
LOGICAL_OR (285) 50
EQ (286) 54
NE (287) 55
GT (288) 57
GE (289) 58
LT (290) 59
LE (291) 60
ADD (292) 62
SUB (293) 63 72
MUL (294) 65
DIV (295) 66
MOD (296) 67
TRUE_T (297) 82
FALSE_T (298) 83


Nonterminals, with rules where they appear

$accept (44)
    on left: 0
translation_unit (45)
    on left: 1 2, on right: 0 2
def_or_statement (46)
    on left: 3 4, on right: 1 2
function_def (47)
    on left: 5 6, on right: 3
argument_list (48)
    on left: 7 8, on right: 8 44 46
parameter_list (49)
    on left: 9 10, on right: 5 10
block (50)
    on left: 11 12, on right: 5 6 26 27 28 29 32 33 34
statement_list (51)
    on left: 13 14, on right: 11 14
statement (52)
    on left: 15 16 17 18 19 20 21 22, on right: 4 13 14
global_statement (53)
    on left: 23, on right: 16
identifier_list (54)
    on left: 24 25, on right: 23 25
if_statement (55)
    on left: 26 27 28 29, on right: 17
elseif_list (56)
    on left: 30 31, on right: 28 29 31
elseif (57)
    on left: 32, on right: 30 31
for_statement (58)
    on left: 33, on right: 18
while_statement (59)
    on left: 34, on right: 19
return_statement (60)
    on left: 35, on right: 22
break_statement (61)
    on left: 36, on right: 20
continue_statement (62)
    on left: 37, on right: 21
expression_opt (63)
    on left: 38 39, on right: 33
statement_expression (64)
    on left: 40 41 42, on right: 15
assign_expression (65)
    on left: 43, on right: 40
method_call_expression (66)
    on left: 44 45, on right: 41 76
function_call_expression (67)
    on left: 46 47, on right: 42 75
expression (68)
    on left: 48, on right: 7 8 26 27 28 29 32 34 35 39 43 74 77
logical_or_expression (69)
    on left: 49 50, on right: 48 50
logical_and_expression (70)
    on left: 51 52, on right: 49 50 52
equality_expression (71)
    on left: 53 54 55, on right: 51 52 54 55
relational_expression (72)
    on left: 56 57 58 59 60, on right: 53 54 55 57 58 59 60
add_sub_expression (73)
    on left: 61 62 63, on right: 56 57 58 59 60 62 63
mul_div_mod_expression (74)
    on left: 64 65 66 67, on right: 61 62 63 65 66 67
incr_decr_expression (75)
    on left: 68 69 70, on right: 64 65 66 67 69 70
minus_expression (76)
    on left: 71 72, on right: 68
postfix_expression (77)
    on left: 73 74, on right: 44 45 71 72 74
primary_expression (78)
    on left: 75 76 77 78 79 80 81 82 83 84, on right: 73


state 0

    0 $accept: . translation_unit $end

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    FUNCTION        shift, and go to state 5
    IF              shift, and go to state 6
    WHILE           shift, and go to state 7
    FOR             shift, and go to state 8
    RETURN_T        shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    translation_unit          go to state 16
    def_or_statement          go to state 17
    function_def              go to state 18
    statement                 go to state 19
    global_statement          go to state 20
    identifier_list           go to state 21
    if_statement              go to state 22
    for_statement             go to state 23
    while_statement           go to state 24
    return_statement          go to state 25
    break_statement           go to state 26
    continue_statement        go to state 27
    statement_expression      go to state 28
    assign_expression         go to state 29
    method_call_expression    go to state 30
    function_call_expression  go to state 31
    postfix_expression        go to state 32
    primary_expression        go to state 33


state 1

   79 primary_expression: INT_LITERAL .

    $default  reduce using rule 79 (primary_expression)


state 2

   80 primary_expression: DOUBLE_LITERAL .

    $default  reduce using rule 80 (primary_expression)


state 3

   81 primary_expression: STRING_LITERAL .

    $default  reduce using rule 81 (primary_expression)


state 4

   24 identifier_list: IDENTIFIER .
   43 assign_expression: IDENTIFIER . ASSIGN expression
   46 function_call_expression: IDENTIFIER . LP argument_list RP
   47                         | IDENTIFIER . LP RP
   78 primary_expression: IDENTIFIER .

    LP      shift, and go to state 34
    ASSIGN  shift, and go to state 35

    LB        reduce using rule 78 (primary_expression)
    DOT       reduce using rule 78 (primary_expression)
    $default  reduce using rule 24 (identifier_list)


state 5

    5 function_def: FUNCTION . IDENTIFIER LP parameter_list RP block
    6             | FUNCTION . IDENTIFIER LP RP block

    IDENTIFIER  shift, and go to state 36


state 6

   26 if_statement: IF . expression block
   27             | IF . expression block ELSE block
   28             | IF . expression block elseif_list
   29             | IF . expression block elseif_list ELSE block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    expression                go to state 41
    logical_or_expression     go to state 42
    logical_and_expression    go to state 43
    equality_expression       go to state 44
    relational_expression     go to state 45
    add_sub_expression        go to state 46
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 7

   34 while_statement: WHILE . expression block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    expression                go to state 51
    logical_or_expression     go to state 42
    logical_and_expression    go to state 43
    equality_expression       go to state 44
    relational_expression     go to state 45
    add_sub_expression        go to state 46
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 8

   33 for_statement: FOR . expression_opt COMMA expression_opt COMMA expression_opt block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    $default  reduce using rule 38 (expression_opt)

    expression_opt            go to state 52
    method_call_expression    go to state 39
    function_call_expression  go to state 40
    expression                go to state 53
    logical_or_expression     go to state 42
    logical_and_expression    go to state 43
    equality_expression       go to state 44
    relational_expression     go to state 45
    add_sub_expression        go to state 46
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 9

   35 return_statement: RETURN_T . expression SEMICOLON

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    expression                go to state 54
    logical_or_expression     go to state 42
    logical_and_expression    go to state 43
    equality_expression       go to state 44
    relational_expression     go to state 45
    add_sub_expression        go to state 46
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 10

   36 break_statement: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 55


state 11

   37 continue_statement: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 56


state 12

   84 primary_expression: NULL_T .

    $default  reduce using rule 84 (primary_expression)


state 13

   77 primary_expression: LP . expression RP

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    expression                go to state 57
    logical_or_expression     go to state 42
    logical_and_expression    go to state 43
    equality_expression       go to state 44
    relational_expression     go to state 45
    add_sub_expression        go to state 46
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 14

   82 primary_expression: TRUE_T .

    $default  reduce using rule 82 (primary_expression)


state 15

   83 primary_expression: FALSE_T .

    $default  reduce using rule 83 (primary_expression)


state 16

    0 $accept: translation_unit . $end
    2 translation_unit: translation_unit . def_or_statement

    $end            shift, and go to state 58
    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    FUNCTION        shift, and go to state 5
    IF              shift, and go to state 6
    WHILE           shift, and go to state 7
    FOR             shift, and go to state 8
    RETURN_T        shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    def_or_statement          go to state 59
    function_def              go to state 18
    statement                 go to state 19
    global_statement          go to state 20
    identifier_list           go to state 21
    if_statement              go to state 22
    for_statement             go to state 23
    while_statement           go to state 24
    return_statement          go to state 25
    break_statement           go to state 26
    continue_statement        go to state 27
    statement_expression      go to state 28
    assign_expression         go to state 29
    method_call_expression    go to state 30
    function_call_expression  go to state 31
    postfix_expression        go to state 32
    primary_expression        go to state 33


state 17

    1 translation_unit: def_or_statement .

    $default  reduce using rule 1 (translation_unit)


state 18

    3 def_or_statement: function_def .

    $default  reduce using rule 3 (def_or_statement)


state 19

    4 def_or_statement: statement .

    $default  reduce using rule 4 (def_or_statement)


state 20

   16 statement: global_statement .

    $default  reduce using rule 16 (statement)


state 21

   23 global_statement: identifier_list . SEMICOLON
   25 identifier_list: identifier_list . COMMA IDENTIFIER

    SEMICOLON  shift, and go to state 60
    COMMA      shift, and go to state 61


state 22

   17 statement: if_statement .

    $default  reduce using rule 17 (statement)


state 23

   18 statement: for_statement .

    $default  reduce using rule 18 (statement)


state 24

   19 statement: while_statement .

    $default  reduce using rule 19 (statement)


state 25

   22 statement: return_statement .

    $default  reduce using rule 22 (statement)


state 26

   20 statement: break_statement .

    $default  reduce using rule 20 (statement)


state 27

   21 statement: continue_statement .

    $default  reduce using rule 21 (statement)


state 28

   15 statement: statement_expression . SEMICOLON

    SEMICOLON  shift, and go to state 62


state 29

   40 statement_expression: assign_expression .

    $default  reduce using rule 40 (statement_expression)


state 30

   41 statement_expression: method_call_expression .
   76 primary_expression: method_call_expression .

    SEMICOLON  reduce using rule 41 (statement_expression)
    $default   reduce using rule 76 (primary_expression)


state 31

   42 statement_expression: function_call_expression .
   75 primary_expression: function_call_expression .

    SEMICOLON  reduce using rule 42 (statement_expression)
    $default   reduce using rule 75 (primary_expression)


state 32

   44 method_call_expression: postfix_expression . DOT IDENTIFIER LP argument_list RP
   45                       | postfix_expression . DOT IDENTIFIER LP RP
   74 postfix_expression: postfix_expression . LB expression RB

    LB   shift, and go to state 63
    DOT  shift, and go to state 64


state 33

   73 postfix_expression: primary_expression .

    $default  reduce using rule 73 (postfix_expression)


state 34

   46 function_call_expression: IDENTIFIER LP . argument_list RP
   47                         | IDENTIFIER LP . RP

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    RP              shift, and go to state 65
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    argument_list             go to state 66
    method_call_expression    go to state 39
    function_call_expression  go to state 40
    expression                go to state 67
    logical_or_expression     go to state 42
    logical_and_expression    go to state 43
    equality_expression       go to state 44
    relational_expression     go to state 45
    add_sub_expression        go to state 46
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 35

   43 assign_expression: IDENTIFIER ASSIGN . expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    expression                go to state 68
    logical_or_expression     go to state 42
    logical_and_expression    go to state 43
    equality_expression       go to state 44
    relational_expression     go to state 45
    add_sub_expression        go to state 46
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 36

    5 function_def: FUNCTION IDENTIFIER . LP parameter_list RP block
    6             | FUNCTION IDENTIFIER . LP RP block

    LP  shift, and go to state 69


state 37

   46 function_call_expression: IDENTIFIER . LP argument_list RP
   47                         | IDENTIFIER . LP RP
   78 primary_expression: IDENTIFIER .

    LP  shift, and go to state 34

    $default  reduce using rule 78 (primary_expression)


state 38

   72 minus_expression: SUB . postfix_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    postfix_expression        go to state 70
    primary_expression        go to state 33


state 39

   76 primary_expression: method_call_expression .

    $default  reduce using rule 76 (primary_expression)


state 40

   75 primary_expression: function_call_expression .

    $default  reduce using rule 75 (primary_expression)


state 41

   26 if_statement: IF expression . block
   27             | IF expression . block ELSE block
   28             | IF expression . block elseif_list
   29             | IF expression . block elseif_list ELSE block

    LC  shift, and go to state 71

    block  go to state 72


state 42

   48 expression: logical_or_expression .
   50 logical_or_expression: logical_or_expression . LOGICAL_OR logical_and_expression

    LOGICAL_OR  shift, and go to state 73

    $default  reduce using rule 48 (expression)


state 43

   49 logical_or_expression: logical_and_expression .
   52 logical_and_expression: logical_and_expression . LOGICAL_AND equality_expression

    LOGICAL_AND  shift, and go to state 74

    $default  reduce using rule 49 (logical_or_expression)


state 44

   51 logical_and_expression: equality_expression .
   54 equality_expression: equality_expression . EQ relational_expression
   55                    | equality_expression . NE relational_expression

    EQ  shift, and go to state 75
    NE  shift, and go to state 76

    $default  reduce using rule 51 (logical_and_expression)


state 45

   53 equality_expression: relational_expression .
   57 relational_expression: relational_expression . GT add_sub_expression
   58                      | relational_expression . GE add_sub_expression
   59                      | relational_expression . LT add_sub_expression
   60                      | relational_expression . LE add_sub_expression

    GT  shift, and go to state 77
    GE  shift, and go to state 78
    LT  shift, and go to state 79
    LE  shift, and go to state 80

    $default  reduce using rule 53 (equality_expression)


state 46

   56 relational_expression: add_sub_expression .
   62 add_sub_expression: add_sub_expression . ADD mul_div_mod_expression
   63                   | add_sub_expression . SUB mul_div_mod_expression

    ADD  shift, and go to state 81
    SUB  shift, and go to state 82

    $default  reduce using rule 56 (relational_expression)


state 47

   61 add_sub_expression: mul_div_mod_expression .
   65 mul_div_mod_expression: mul_div_mod_expression . MUL incr_decr_expression
   66                       | mul_div_mod_expression . DIV incr_decr_expression
   67                       | mul_div_mod_expression . MOD incr_decr_expression

    MUL  shift, and go to state 83
    DIV  shift, and go to state 84
    MOD  shift, and go to state 85

    $default  reduce using rule 61 (add_sub_expression)


state 48

   64 mul_div_mod_expression: incr_decr_expression .
   69 incr_decr_expression: incr_decr_expression . INCR
   70                     | incr_decr_expression . DECR

    INCR  shift, and go to state 86
    DECR  shift, and go to state 87

    $default  reduce using rule 64 (mul_div_mod_expression)


state 49

   68 incr_decr_expression: minus_expression .

    $default  reduce using rule 68 (incr_decr_expression)


state 50

   44 method_call_expression: postfix_expression . DOT IDENTIFIER LP argument_list RP
   45                       | postfix_expression . DOT IDENTIFIER LP RP
   71 minus_expression: postfix_expression .
   74 postfix_expression: postfix_expression . LB expression RB

    LB   shift, and go to state 63
    DOT  shift, and go to state 64

    $default  reduce using rule 71 (minus_expression)


state 51

   34 while_statement: WHILE expression . block

    LC  shift, and go to state 71

    block  go to state 88


state 52

   33 for_statement: FOR expression_opt . COMMA expression_opt COMMA expression_opt block

    COMMA  shift, and go to state 89


state 53

   39 expression_opt: expression .

    $default  reduce using rule 39 (expression_opt)


state 54

   35 return_statement: RETURN_T expression . SEMICOLON

    SEMICOLON  shift, and go to state 90


state 55

   36 break_statement: BREAK SEMICOLON .

    $default  reduce using rule 36 (break_statement)


state 56

   37 continue_statement: CONTINUE SEMICOLON .

    $default  reduce using rule 37 (continue_statement)


state 57

   77 primary_expression: LP expression . RP

    RP  shift, and go to state 91


state 58

    0 $accept: translation_unit $end .

    $default  accept


state 59

    2 translation_unit: translation_unit def_or_statement .

    $default  reduce using rule 2 (translation_unit)


state 60

   23 global_statement: identifier_list SEMICOLON .

    $default  reduce using rule 23 (global_statement)


state 61

   25 identifier_list: identifier_list COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 92


state 62

   15 statement: statement_expression SEMICOLON .

    $default  reduce using rule 15 (statement)


state 63

   74 postfix_expression: postfix_expression LB . expression RB

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    expression                go to state 93
    logical_or_expression     go to state 42
    logical_and_expression    go to state 43
    equality_expression       go to state 44
    relational_expression     go to state 45
    add_sub_expression        go to state 46
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 64

   44 method_call_expression: postfix_expression DOT . IDENTIFIER LP argument_list RP
   45                       | postfix_expression DOT . IDENTIFIER LP RP

    IDENTIFIER  shift, and go to state 94


state 65

   47 function_call_expression: IDENTIFIER LP RP .

    $default  reduce using rule 47 (function_call_expression)


state 66

    8 argument_list: argument_list . COMMA expression
   46 function_call_expression: IDENTIFIER LP argument_list . RP

    RP     shift, and go to state 95
    COMMA  shift, and go to state 96


state 67

    7 argument_list: expression .

    $default  reduce using rule 7 (argument_list)


state 68

   43 assign_expression: IDENTIFIER ASSIGN expression .

    $default  reduce using rule 43 (assign_expression)


state 69

    5 function_def: FUNCTION IDENTIFIER LP . parameter_list RP block
    6             | FUNCTION IDENTIFIER LP . RP block

    IDENTIFIER  shift, and go to state 97
    RP          shift, and go to state 98

    parameter_list  go to state 99


state 70

   44 method_call_expression: postfix_expression . DOT IDENTIFIER LP argument_list RP
   45                       | postfix_expression . DOT IDENTIFIER LP RP
   72 minus_expression: SUB postfix_expression .
   74 postfix_expression: postfix_expression . LB expression RB

    LB   shift, and go to state 63
    DOT  shift, and go to state 64

    $default  reduce using rule 72 (minus_expression)


state 71

   11 block: LC . statement_list RC
   12      | LC . RC

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 6
    WHILE           shift, and go to state 7
    FOR             shift, and go to state 8
    RETURN_T        shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    RC              shift, and go to state 100
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    statement_list            go to state 101
    statement                 go to state 102
    global_statement          go to state 20
    identifier_list           go to state 21
    if_statement              go to state 22
    for_statement             go to state 23
    while_statement           go to state 24
    return_statement          go to state 25
    break_statement           go to state 26
    continue_statement        go to state 27
    statement_expression      go to state 28
    assign_expression         go to state 29
    method_call_expression    go to state 30
    function_call_expression  go to state 31
    postfix_expression        go to state 32
    primary_expression        go to state 33


state 72

   26 if_statement: IF expression block .
   27             | IF expression block . ELSE block
   28             | IF expression block . elseif_list
   29             | IF expression block . elseif_list ELSE block

    ELSE  shift, and go to state 103

    $default  reduce using rule 26 (if_statement)

    elseif_list  go to state 104
    elseif       go to state 105


state 73

   50 logical_or_expression: logical_or_expression LOGICAL_OR . logical_and_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    logical_and_expression    go to state 106
    equality_expression       go to state 44
    relational_expression     go to state 45
    add_sub_expression        go to state 46
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 74

   52 logical_and_expression: logical_and_expression LOGICAL_AND . equality_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    equality_expression       go to state 107
    relational_expression     go to state 45
    add_sub_expression        go to state 46
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 75

   54 equality_expression: equality_expression EQ . relational_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    relational_expression     go to state 108
    add_sub_expression        go to state 46
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 76

   55 equality_expression: equality_expression NE . relational_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    relational_expression     go to state 109
    add_sub_expression        go to state 46
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 77

   57 relational_expression: relational_expression GT . add_sub_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    add_sub_expression        go to state 110
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 78

   58 relational_expression: relational_expression GE . add_sub_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    add_sub_expression        go to state 111
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 79

   59 relational_expression: relational_expression LT . add_sub_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    add_sub_expression        go to state 112
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 80

   60 relational_expression: relational_expression LE . add_sub_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    add_sub_expression        go to state 113
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 81

   62 add_sub_expression: add_sub_expression ADD . mul_div_mod_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    mul_div_mod_expression    go to state 114
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 82

   63 add_sub_expression: add_sub_expression SUB . mul_div_mod_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    mul_div_mod_expression    go to state 115
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 83

   65 mul_div_mod_expression: mul_div_mod_expression MUL . incr_decr_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    incr_decr_expression      go to state 116
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 84

   66 mul_div_mod_expression: mul_div_mod_expression DIV . incr_decr_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    incr_decr_expression      go to state 117
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 85

   67 mul_div_mod_expression: mul_div_mod_expression MOD . incr_decr_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    incr_decr_expression      go to state 118
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 86

   69 incr_decr_expression: incr_decr_expression INCR .

    $default  reduce using rule 69 (incr_decr_expression)


state 87

   70 incr_decr_expression: incr_decr_expression DECR .

    $default  reduce using rule 70 (incr_decr_expression)


state 88

   34 while_statement: WHILE expression block .

    $default  reduce using rule 34 (while_statement)


state 89

   33 for_statement: FOR expression_opt COMMA . expression_opt COMMA expression_opt block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    $default  reduce using rule 38 (expression_opt)

    expression_opt            go to state 119
    method_call_expression    go to state 39
    function_call_expression  go to state 40
    expression                go to state 53
    logical_or_expression     go to state 42
    logical_and_expression    go to state 43
    equality_expression       go to state 44
    relational_expression     go to state 45
    add_sub_expression        go to state 46
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 90

   35 return_statement: RETURN_T expression SEMICOLON .

    $default  reduce using rule 35 (return_statement)


state 91

   77 primary_expression: LP expression RP .

    $default  reduce using rule 77 (primary_expression)


state 92

   25 identifier_list: identifier_list COMMA IDENTIFIER .

    $default  reduce using rule 25 (identifier_list)


state 93

   74 postfix_expression: postfix_expression LB expression . RB

    RB  shift, and go to state 120


state 94

   44 method_call_expression: postfix_expression DOT IDENTIFIER . LP argument_list RP
   45                       | postfix_expression DOT IDENTIFIER . LP RP

    LP  shift, and go to state 121


state 95

   46 function_call_expression: IDENTIFIER LP argument_list RP .

    $default  reduce using rule 46 (function_call_expression)


state 96

    8 argument_list: argument_list COMMA . expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    expression                go to state 122
    logical_or_expression     go to state 42
    logical_and_expression    go to state 43
    equality_expression       go to state 44
    relational_expression     go to state 45
    add_sub_expression        go to state 46
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 97

    9 parameter_list: IDENTIFIER .

    $default  reduce using rule 9 (parameter_list)


state 98

    6 function_def: FUNCTION IDENTIFIER LP RP . block

    LC  shift, and go to state 71

    block  go to state 123


state 99

    5 function_def: FUNCTION IDENTIFIER LP parameter_list . RP block
   10 parameter_list: parameter_list . COMMA IDENTIFIER

    RP     shift, and go to state 124
    COMMA  shift, and go to state 125


state 100

   12 block: LC RC .

    $default  reduce using rule 12 (block)


state 101

   11 block: LC statement_list . RC
   14 statement_list: statement_list . statement

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 6
    WHILE           shift, and go to state 7
    FOR             shift, and go to state 8
    RETURN_T        shift, and go to state 9
    BREAK           shift, and go to state 10
    CONTINUE        shift, and go to state 11
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    RC              shift, and go to state 126
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    statement                 go to state 127
    global_statement          go to state 20
    identifier_list           go to state 21
    if_statement              go to state 22
    for_statement             go to state 23
    while_statement           go to state 24
    return_statement          go to state 25
    break_statement           go to state 26
    continue_statement        go to state 27
    statement_expression      go to state 28
    assign_expression         go to state 29
    method_call_expression    go to state 30
    function_call_expression  go to state 31
    postfix_expression        go to state 32
    primary_expression        go to state 33


state 102

   13 statement_list: statement .

    $default  reduce using rule 13 (statement_list)


state 103

   27 if_statement: IF expression block ELSE . block
   32 elseif: ELSE . IF expression block

    IF  shift, and go to state 128
    LC  shift, and go to state 71

    block  go to state 129


state 104

   28 if_statement: IF expression block elseif_list .
   29             | IF expression block elseif_list . ELSE block
   31 elseif_list: elseif_list . elseif

    ELSE  shift, and go to state 130

    $default  reduce using rule 28 (if_statement)

    elseif  go to state 131


state 105

   30 elseif_list: elseif .

    $default  reduce using rule 30 (elseif_list)


state 106

   50 logical_or_expression: logical_or_expression LOGICAL_OR logical_and_expression .
   52 logical_and_expression: logical_and_expression . LOGICAL_AND equality_expression

    LOGICAL_AND  shift, and go to state 74

    $default  reduce using rule 50 (logical_or_expression)


state 107

   52 logical_and_expression: logical_and_expression LOGICAL_AND equality_expression .
   54 equality_expression: equality_expression . EQ relational_expression
   55                    | equality_expression . NE relational_expression

    EQ  shift, and go to state 75
    NE  shift, and go to state 76

    $default  reduce using rule 52 (logical_and_expression)


state 108

   54 equality_expression: equality_expression EQ relational_expression .
   57 relational_expression: relational_expression . GT add_sub_expression
   58                      | relational_expression . GE add_sub_expression
   59                      | relational_expression . LT add_sub_expression
   60                      | relational_expression . LE add_sub_expression

    GT  shift, and go to state 77
    GE  shift, and go to state 78
    LT  shift, and go to state 79
    LE  shift, and go to state 80

    $default  reduce using rule 54 (equality_expression)


state 109

   55 equality_expression: equality_expression NE relational_expression .
   57 relational_expression: relational_expression . GT add_sub_expression
   58                      | relational_expression . GE add_sub_expression
   59                      | relational_expression . LT add_sub_expression
   60                      | relational_expression . LE add_sub_expression

    GT  shift, and go to state 77
    GE  shift, and go to state 78
    LT  shift, and go to state 79
    LE  shift, and go to state 80

    $default  reduce using rule 55 (equality_expression)


state 110

   57 relational_expression: relational_expression GT add_sub_expression .
   62 add_sub_expression: add_sub_expression . ADD mul_div_mod_expression
   63                   | add_sub_expression . SUB mul_div_mod_expression

    ADD  shift, and go to state 81
    SUB  shift, and go to state 82

    $default  reduce using rule 57 (relational_expression)


state 111

   58 relational_expression: relational_expression GE add_sub_expression .
   62 add_sub_expression: add_sub_expression . ADD mul_div_mod_expression
   63                   | add_sub_expression . SUB mul_div_mod_expression

    ADD  shift, and go to state 81
    SUB  shift, and go to state 82

    $default  reduce using rule 58 (relational_expression)


state 112

   59 relational_expression: relational_expression LT add_sub_expression .
   62 add_sub_expression: add_sub_expression . ADD mul_div_mod_expression
   63                   | add_sub_expression . SUB mul_div_mod_expression

    ADD  shift, and go to state 81
    SUB  shift, and go to state 82

    $default  reduce using rule 59 (relational_expression)


state 113

   60 relational_expression: relational_expression LE add_sub_expression .
   62 add_sub_expression: add_sub_expression . ADD mul_div_mod_expression
   63                   | add_sub_expression . SUB mul_div_mod_expression

    ADD  shift, and go to state 81
    SUB  shift, and go to state 82

    $default  reduce using rule 60 (relational_expression)


state 114

   62 add_sub_expression: add_sub_expression ADD mul_div_mod_expression .
   65 mul_div_mod_expression: mul_div_mod_expression . MUL incr_decr_expression
   66                       | mul_div_mod_expression . DIV incr_decr_expression
   67                       | mul_div_mod_expression . MOD incr_decr_expression

    MUL  shift, and go to state 83
    DIV  shift, and go to state 84
    MOD  shift, and go to state 85

    $default  reduce using rule 62 (add_sub_expression)


state 115

   63 add_sub_expression: add_sub_expression SUB mul_div_mod_expression .
   65 mul_div_mod_expression: mul_div_mod_expression . MUL incr_decr_expression
   66                       | mul_div_mod_expression . DIV incr_decr_expression
   67                       | mul_div_mod_expression . MOD incr_decr_expression

    MUL  shift, and go to state 83
    DIV  shift, and go to state 84
    MOD  shift, and go to state 85

    $default  reduce using rule 63 (add_sub_expression)


state 116

   65 mul_div_mod_expression: mul_div_mod_expression MUL incr_decr_expression .
   69 incr_decr_expression: incr_decr_expression . INCR
   70                     | incr_decr_expression . DECR

    INCR  shift, and go to state 86
    DECR  shift, and go to state 87

    $default  reduce using rule 65 (mul_div_mod_expression)


state 117

   66 mul_div_mod_expression: mul_div_mod_expression DIV incr_decr_expression .
   69 incr_decr_expression: incr_decr_expression . INCR
   70                     | incr_decr_expression . DECR

    INCR  shift, and go to state 86
    DECR  shift, and go to state 87

    $default  reduce using rule 66 (mul_div_mod_expression)


state 118

   67 mul_div_mod_expression: mul_div_mod_expression MOD incr_decr_expression .
   69 incr_decr_expression: incr_decr_expression . INCR
   70                     | incr_decr_expression . DECR

    INCR  shift, and go to state 86
    DECR  shift, and go to state 87

    $default  reduce using rule 67 (mul_div_mod_expression)


state 119

   33 for_statement: FOR expression_opt COMMA expression_opt . COMMA expression_opt block

    COMMA  shift, and go to state 132


state 120

   74 postfix_expression: postfix_expression LB expression RB .

    $default  reduce using rule 74 (postfix_expression)


state 121

   44 method_call_expression: postfix_expression DOT IDENTIFIER LP . argument_list RP
   45                       | postfix_expression DOT IDENTIFIER LP . RP

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    RP              shift, and go to state 133
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    argument_list             go to state 134
    method_call_expression    go to state 39
    function_call_expression  go to state 40
    expression                go to state 67
    logical_or_expression     go to state 42
    logical_and_expression    go to state 43
    equality_expression       go to state 44
    relational_expression     go to state 45
    add_sub_expression        go to state 46
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 122

    8 argument_list: argument_list COMMA expression .

    $default  reduce using rule 8 (argument_list)


state 123

    6 function_def: FUNCTION IDENTIFIER LP RP block .

    $default  reduce using rule 6 (function_def)


state 124

    5 function_def: FUNCTION IDENTIFIER LP parameter_list RP . block

    LC  shift, and go to state 71

    block  go to state 135


state 125

   10 parameter_list: parameter_list COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 136


state 126

   11 block: LC statement_list RC .

    $default  reduce using rule 11 (block)


state 127

   14 statement_list: statement_list statement .

    $default  reduce using rule 14 (statement_list)


state 128

   32 elseif: ELSE IF . expression block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    method_call_expression    go to state 39
    function_call_expression  go to state 40
    expression                go to state 137
    logical_or_expression     go to state 42
    logical_and_expression    go to state 43
    equality_expression       go to state 44
    relational_expression     go to state 45
    add_sub_expression        go to state 46
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 129

   27 if_statement: IF expression block ELSE block .

    $default  reduce using rule 27 (if_statement)


state 130

   29 if_statement: IF expression block elseif_list ELSE . block
   32 elseif: ELSE . IF expression block

    IF  shift, and go to state 128
    LC  shift, and go to state 71

    block  go to state 138


state 131

   31 elseif_list: elseif_list elseif .

    $default  reduce using rule 31 (elseif_list)


state 132

   33 for_statement: FOR expression_opt COMMA expression_opt COMMA . expression_opt block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    IDENTIFIER      shift, and go to state 37
    NULL_T          shift, and go to state 12
    LP              shift, and go to state 13
    SUB             shift, and go to state 38
    TRUE_T          shift, and go to state 14
    FALSE_T         shift, and go to state 15

    $default  reduce using rule 38 (expression_opt)

    expression_opt            go to state 139
    method_call_expression    go to state 39
    function_call_expression  go to state 40
    expression                go to state 53
    logical_or_expression     go to state 42
    logical_and_expression    go to state 43
    equality_expression       go to state 44
    relational_expression     go to state 45
    add_sub_expression        go to state 46
    mul_div_mod_expression    go to state 47
    incr_decr_expression      go to state 48
    minus_expression          go to state 49
    postfix_expression        go to state 50
    primary_expression        go to state 33


state 133

   45 method_call_expression: postfix_expression DOT IDENTIFIER LP RP .

    $default  reduce using rule 45 (method_call_expression)


state 134

    8 argument_list: argument_list . COMMA expression
   44 method_call_expression: postfix_expression DOT IDENTIFIER LP argument_list . RP

    RP     shift, and go to state 140
    COMMA  shift, and go to state 96


state 135

    5 function_def: FUNCTION IDENTIFIER LP parameter_list RP block .

    $default  reduce using rule 5 (function_def)


state 136

   10 parameter_list: parameter_list COMMA IDENTIFIER .

    $default  reduce using rule 10 (parameter_list)


state 137

   32 elseif: ELSE IF expression . block

    LC  shift, and go to state 71

    block  go to state 141


state 138

   29 if_statement: IF expression block elseif_list ELSE block .

    $default  reduce using rule 29 (if_statement)


state 139

   33 for_statement: FOR expression_opt COMMA expression_opt COMMA expression_opt . block

    LC  shift, and go to state 71

    block  go to state 142


state 140

   44 method_call_expression: postfix_expression DOT IDENTIFIER LP argument_list RP .

    $default  reduce using rule 44 (method_call_expression)


state 141

   32 elseif: ELSE IF expression block .

    $default  reduce using rule 32 (elseif)


state 142

   33 for_statement: FOR expression_opt COMMA expression_opt COMMA expression_opt block .

    $default  reduce using rule 33 (for_statement)
